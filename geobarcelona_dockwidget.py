# -*- coding: utf-8 -*-
"""
/***************************************************************************
                               GeoBarcelona
 
 A QGIS plugin to search and zoom addresses in Barcelona city 
 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/

        copyright            : (C) 2019 by Javier Casado
        email                : javicasnov@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   any later version.                                                    *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
import json
import threading

from PyQt5 import QtGui
from PyQt5.QtGui import QColor
from PyQt5 import QtWidgets
from PyQt5 import uic
from PyQt5 import QtCore
from PyQt5.QtCore import pyqtSignal, QCoreApplication, Qt
from PyQt5.QtWidgets import QTableWidgetItem, QApplication

from qgis.gui import QgsVertexMarker, QgsRubberBand
from qgis.core import *
from datetime import datetime
from functools import wraps

from .networkaccessmanager import NetworkAccessManager, RequestsException

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'geobarcelona_dockwidget_base.ui'))

class GeoBarcelonaDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()
    
    USER_AGENT = b'Mozilla/5.0 QGIS GeoBarcelonaLocatorFilter'

    def __init__(self, iface, parent=None):
        super(GeoBarcelonaDockWidget, self).__init__(parent)
        self.setupUi(self)

        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.setupPlug()
        self.setupEvents()
    
    def closeEvent(self, event):
        self.ui.txtSearch.clear()
        self.ui.tblResult.clearContents()
        self.ui.tblResult.setRowCount(0)
        self.ui.lblResult.setText(QCoreApplication.translate('GeoBarcelona Dock 1', u'No results found'))
        self.ui.tblResult.resizeColumnsToContents()
        self.canvas.scene().removeItem(self.marker)
        self.canvas.scene().removeItem(self.rubber_dist)
        self.canvas.scene().removeItem(self.rubber_barri)
        self.closingPlugin.emit()
        event.accept()
    
    def delete_data(self):
        self.ui.txtSearch.clear()
        self.ui.tblResult.clearContents()
        self.ui.tblResult.setRowCount(0)
        self.ui.lblResult.setText(QCoreApplication.translate('GeoBarcelona Dock 2', u'No results found'))
        self.ui.tblResult.resizeColumnsToContents()
        self.canvas.scene().removeItem(self.marker)
        self.canvas.scene().removeItem(self.rubber_dist)
        self.canvas.scene().removeItem(self.rubber_barri)
        
    def setupPlug(self):

        self.lid = []
        self.marker = QgsVertexMarker(self.canvas)
        self.rubber_dist = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
        self.rubber_barri = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
        self.t = PeriodicTimer(0.1, self.on_Search)
        
        baseDirectory = os.path.dirname(__file__)
        filenamelog = os.path.join(baseDirectory, 'geobarcelona.log') 

        self.DEBUG = True
        self.filenamelog = filenamelog

        self.ui = self

        self.tblResultHeader = [QCoreApplication.translate('GeoBarcelona Dock', u'Address'),QCoreApplication.translate('GeoBarcelona Dock', u'District'),QCoreApplication.translate('GeoBarcelona Dock', u'Neighbourhood')]
        self.ui.tblResult.setHorizontalHeaderLabels(self.tblResultHeader)

    def setupEvents(self):
        self.ui.txtSearch.textEdited.connect(self.start_typing_timer)
        self.ui.tblResult.cellActivated.connect(self.onAction_tblResult)

    def text_focus(self):
        self.ui.txtSearch.setFocus()
        
    def Log(self, msg):

        if self.DEBUG:
            f = open(self.filenamelog, "a")
            f.write("%s: %s\n" % (datetime.now(), msg))
            f.close()
          
    def keyPressEvent(self,event):
        
        if (event.key() == QtCore.Qt.Key_Down) or (event.key() == QtCore.Qt.Key_Enter) or (event.key() == QtCore.Qt.Key_Return):
            
            if self.ui.txtSearch.hasFocus():
                
                self.ui.tblResult.clearSelection()
                self.ui.tblResult.setCurrentIndex(self.ui.tblResult.model().index(0,0))
                self.ui.tblResult.setFocus()                  
        
        elif event.key() == QtCore.Qt.Key_Up:
            
            if self.ui.tblResult.hasFocus():
            
                self.ui.tblResult.clearSelection()
                self.ui.txtSearch.setFocus()
    
    def start_typing_timer(self):
        
        try:
        
            self.t.cancel()
            self.t.start()
        
        except:
        
            self.t.start()
                
    def on_Search(self):
        
        self.ui.txtSearch.blockSignals(True)
        
        changedtext = self.ui.txtSearch.text()
        search = changedtext.strip()
        
        url = 'https://w33.bcn.cat/geoBCN/serveis/territori?q='+search+'&geometria=true&extensio=true'

        nam = NetworkAccessManager()
            
        try:
        
            # "Provide a valid HTTP Referer or User-Agent identifying the application (QGIS geocoder)"
            headers = {b'User-Agent': self.USER_AGENT}
            # use BLOCKING request, as fetchResults already has it's own thread!
            (response, content) = nam.request(url, headers=headers, blocking=True)
            
            if response.status_code == 200:  # other codes are handled by NetworkAccessManager
                
                content_string = content.decode('utf-8')
                locations = json.loads(content_string)
                root = locations['resultats']
                self.lid = root['adreces']

                if len(self.lid) != 0 and search != '':
                    
                    self.ui.tblResult.setUpdatesEnabled(False)
                    self.ui.tblResult.clearContents()
                    self.ui.tblResult.setRowCount(len(self.lid))

                    for count in range(len(self.lid)):
                        nomcomplet = self.lid[count]['nomComplet']
                        districte = self.lid[count]['districte']['descripcio']
                        barri = self.lid[count]['barri']['nom']
                        item001 = QTableWidgetItem(nomcomplet)
                        item002 = QTableWidgetItem(districte)
                        item003 = QTableWidgetItem(barri)
                        self.ui.tblResult.setItem(count, 0, item001)
                        self.ui.tblResult.setItem(count, 1, item002)
                        self.ui.tblResult.setItem(count, 2, item003)
                    
                    self.ui.tblResult.resizeColumnsToContents()
                    self.ui.tblResult.scrollTo(self.ui.tblResult.model().index(0,0))
                    self.ui.tblResult.setUpdatesEnabled(True)

                    if len(self.lid) == 1:

                        self.ui.lblResult.setText(QCoreApplication.translate('GeoBarcelona Dock', u'1 result found'))

                    elif len(self.lid) == 25:

                        self.ui.lblResult.setText(QCoreApplication.translate('GeoBarcelona Dock', u'Displaying first 25 results'))

                    else:

                        self.ui.lblResult.setText(
                            (
                             u'%d ' + QCoreApplication.translate('GeoBarcelona Dock', u'results found')
                            ) % len(self.lid)
                        )

                else:

                    self.ui.tblResult.clearContents()
                    self.ui.tblResult.setRowCount(0)
                    self.ui.tblResult.resizeColumnsToContents()
                    self.canvas.scene().removeItem(self.marker)
                    self.canvas.scene().removeItem(self.rubber_dist)
                    self.canvas.scene().removeItem(self.rubber_barri)
                    self.ui.lblResult.setText(QCoreApplication.translate('GeoBarcelona Dock 3', u'No results found'))

                text1 = self.ui.txtSearch.text()
        
                if text1 != changedtext:

                    self.start_typing_timer()
                    
                else:
                
                    self.ui.txtSearch.blockSignals(False)

        except RequestsException as err:

            self.Log(err)
            self.lid = []
            self.ui.tblResult.clearContents()
            self.ui.tblResult.setRowCount(0)
            self.ui.tblResult.resizeColumnsToContents()
            
            self.canvas.scene().removeItem(self.marker)
            self.canvas.scene().removeItem(self.rubber_dist)
            self.canvas.scene().removeItem(self.rubber_barri)

            if nam.http_call_result.status_code != None:
                
                self.ui.lblResult.setText(QCoreApplication.translate('GeoBarcelona Dock 4', u'No results found'))

            else:
                
                self.ui.lblResult.setText(nam.http_call_result.reason)
            
            self.ui.txtSearch.blockSignals(False)

    def onAction_tblResult(self, i, j):
               
        self.i = i
        self.j = j
        
        dest_crs = QgsProject.instance().crs()
        proj_punt = self.lid[self.i]['localitzacio']['proj']
        x = self.lid[self.i]['localitzacio']['x']
        y = self.lid[self.i]['localitzacio']['y']
        address_name = self.lid[self.i]['nomComplet']
        
        if self.j == 1:
            
            self.canvas.scene().removeItem(self.marker)
            self.canvas.scene().removeItem(self.rubber_dist)
            self.canvas.scene().removeItem(self.rubber_barri)
            self.marker = QgsVertexMarker(self.canvas)
            self.rubber_dist = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)

            num_districte = self.lid[self.i]['districte']['codi']
            nom_districte = self.lid[self.i]['districte']['descripcio']
            
            ext_districte_proj = self.lid[self.i]['districte']['extensio']['proj']
            ext_districte_xmin = self.lid[self.i]['districte']['extensio']['xMin']
            ext_districte_xmax = self.lid[self.i]['districte']['extensio']['xMax']
            ext_districte_ymin = self.lid[self.i]['districte']['extensio']['yMin']
            ext_districte_ymax = self.lid[self.i]['districte']['extensio']['yMax']
            rect_dist = QgsRectangle(ext_districte_xmin,ext_districte_ymin,ext_districte_xmax,ext_districte_ymax)
            
            results_crs = QgsCoordinateReferenceSystem(ext_districte_proj)
            transform = QgsCoordinateTransform(results_crs, dest_crs, QgsProject.instance())
            r = transform.transformBoundingBox(rect_dist)
            
            geom_proj_dist = self.lid[self.i]['districte']['geometria']['proj']
            results_crs = QgsCoordinateReferenceSystem(geom_proj_dist)
            transform = QgsCoordinateTransform(results_crs, dest_crs, QgsProject.instance())            
            geom_coordinates_dist = self.lid[self.i]['districte']['geometria']['coordinates'][0]
            geom_dist = QgsGeometry.fromPolygonXY([[transform.transform(QgsPointXY(pt[0],pt[1])) for pt in geom_coordinates_dist]])
  
            self.rubber_dist.setColor(QColor(0,0,255))
            self.rubber_dist.setFillColor(QColor("Transparent"))
            self.rubber_dist.setWidth(2)
            self.rubber_dist.setToGeometry(geom_dist, None)
            
        elif self.j == 2:
            
            self.canvas.scene().removeItem(self.marker)            
            self.canvas.scene().removeItem(self.rubber_dist)
            self.canvas.scene().removeItem(self.rubber_barri)
            self.marker = QgsVertexMarker(self.canvas)
            self.rubber_barri = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)

            num_barri = self.lid[self.i]['barri']['codi']
            nom_barri = self.lid[self.i]['barri']['nom']
            
            ext_barri_proj = self.lid[self.i]['barri']['extensio']['proj']
            ext_barri_xmin = self.lid[self.i]['barri']['extensio']['xMin']
            ext_barri_xmax = self.lid[self.i]['barri']['extensio']['xMax']
            ext_barri_ymin = self.lid[self.i]['barri']['extensio']['yMin']
            ext_barri_ymax = self.lid[self.i]['barri']['extensio']['yMax']
            rect_barri = QgsRectangle(ext_barri_xmin,ext_barri_ymin,ext_barri_xmax,ext_barri_ymax)
            
            results_crs = QgsCoordinateReferenceSystem(ext_barri_proj)
            transform = QgsCoordinateTransform(results_crs, dest_crs, QgsProject.instance())
            r = transform.transformBoundingBox(rect_barri)
            
            geom_proj_barri = self.lid[self.i]['barri']['geometria']['proj']
            results_crs = QgsCoordinateReferenceSystem(geom_proj_barri)
            transform = QgsCoordinateTransform(results_crs, dest_crs, QgsProject.instance())       
            geom_coordinates = self.lid[self.i]['barri']['geometria']['coordinates'][0]
            geom_barri = QgsGeometry.fromPolygonXY([[transform.transform(QgsPointXY(pt[0],pt[1])) for pt in geom_coordinates]])
                        
            self.rubber_barri.setColor(QColor(255,0,0))
            self.rubber_barri.setFillColor(QColor("Transparent"))
            self.rubber_barri.setWidth(2)
            self.rubber_barri.setToGeometry(geom_barri, None)

        else:
            
            self.canvas.scene().removeItem(self.marker)
            self.canvas.scene().removeItem(self.rubber_dist)
            self.canvas.scene().removeItem(self.rubber_barri)
            self.marker = QgsVertexMarker(self.canvas)
            self.rubber_dist = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
            self.rubber_barri = QgsRubberBand(self.canvas, QgsWkbTypes.PolygonGeometry)
            scale = 50
            rect_punt = QgsRectangle(float(x)-scale,float(y)-scale,float(x)+scale,float(y)+scale)

            results_crs = QgsCoordinateReferenceSystem(proj_punt)
            transform = QgsCoordinateTransform(results_crs, dest_crs, QgsProject.instance())
            r = transform.transformBoundingBox(rect_punt)
        
        self.canvas.setExtent(r)
        pt = QgsPointXY(float(x),float(y))

        results_crs = QgsCoordinateReferenceSystem(proj_punt)
        transform = QgsCoordinateTransform(results_crs, dest_crs, QgsProject.instance())
        r_punt = transform.transform(pt)

        self.marker.setCenter(r_punt)
        self.marker.setColor(QColor(50,50,255,100))
        self.marker.setIconSize(8)
        self.marker.setIconType(QgsVertexMarker.ICON_CIRCLE)
        self.marker.setPenWidth(8)

        self.ui.txtSearch.setText(address_name)
        self.canvas.refresh()

class PeriodicTimer(object):
    
    def __init__(self, interval, callback):
        self.interval = interval

        @wraps(callback)
        def wrapper(*args, **kwargs):
            result = callback(*args, **kwargs)
            if result:
                self.thread = threading.Timer(self.interval,
                                              self.callback)
                self.thread.start()

        self.callback = wrapper

    def start(self):
        self.thread = threading.Timer(self.interval, self.callback)
        self.thread.start()

    def cancel(self):
        self.thread.cancel()
        
if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    dialog = GeoBarcelonaDockWidget()
    app.addDockWidget(dialog)
    dialog.show()
    sys.exit(app.exec_())
